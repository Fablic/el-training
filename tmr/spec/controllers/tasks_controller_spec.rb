require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe TasksController, type: :controller do

  # Common Request Headers
  before(:each) do
    request.env['HTTP_ACCEPT_LANGUAGE'] = 'ja,en-US;q=0.9,en;q=0.8'
    user = FactoryBot.create(:task_user)
    session[:user] = user
  end

  # This should return the minimal set of attributes required to create a valid
  # Task. As you add validations to Task, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {FactoryBot.build(:task_attributes)}

  let(:invalid_attributes) {FactoryBot.build(:task_attributes, title: '')}

  let(:tasklist) {
    [
      valid_attributes.clone.merge!(title: '1111', created_at: Date.today - 1.day),
      valid_attributes.clone.merge!(title: '2222', created_at: Date.today - 5.days),
      valid_attributes.clone.merge!(title: '3333', created_at: Date.today - 2.days)
    ]
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TasksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    render_views

    before do
      for task in tasklist do
        Task.create! task
      end

      get :index, params: {}, session: valid_session
    end

    it 'returns a success response' do
      expect(response).to be_successful
    end

    it '3つのタスクが表示される' do
      expect(assigns(:tasks).length).to eq tasklist.length
    end

    it 'タスクは作成日時順で表示される' do
      newest = nil
      for task in assigns(:tasks) do
        if newest then
          expect(task.created_at).to be >= newest.created_at
        end
        newest = task
      end
    end

    it 'すべてのタスクが表示されている' do
      for task in tasklist do
        expect(response.body).to include(task[:title])
      end
    end

  end

  describe 'GET #show' do
    it 'returns a success response' do
      task = Task.create! valid_attributes
      get :show, params: {id: task.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      task = Task.create! valid_attributes
      get :edit, params: {id: task.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context '作成成功' do
      it '新規タスク' do
        expect {
          post :create, params: {task: valid_attributes}, session: valid_session
        }.to change(Task, :count).by(1)
      end

      it 'タスクの詳細ページが表示される' do
        post :create, params: {task: valid_attributes}, session: valid_session
        task = Task.last
        expect(response).to redirect_to(task)
        expect(task.title).to eq valid_attributes[:title]
        expect(task.description).to eq valid_attributes[:description]
      end
    end

    context '既存ラベルを指定して新規作成' do
      it 'ラベルが指定されている' do
        label = Label.first
        post :create, params: {task: valid_attributes, labels: [label.id]}, session: valid_session
        task = Task.last
        expect(task.labels.first.id).to eq label.id
      end
    end

    context '新規ラベルを指定して新規作成' do
      it 'ラベルが指定されている' do
        post :create, params: {task: valid_attributes, new_labels: ['New Label']}, session: valid_session
        task = Task.last
        expect(task.labels.first.label).to eq 'New Label'
      end
    end

    context '作成失敗' do
      it '入力ページが再表示される' do
        post :create, params: {task: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'PUT #update' do
    context '更新成功' do
      let(:new_attributes) {valid_attributes.clone.merge!(title: 'New title', description:'New description')}

      it 'タスクが更新される' do
        task = Task.create! valid_attributes
        put :update, params: {id: task.to_param, task: new_attributes}, session: valid_session
        task.reload

        expect(task.title).to eq new_attributes[:title]
        expect(task.description).to eq new_attributes[:description]
      end

      it 'タスク詳細ページが表示される' do
        task = Task.create! valid_attributes
        put :update, params: {id: task.to_param, task: valid_attributes}, session: valid_session
        expect(response).to redirect_to(task)
      end
    end

    context 'ラベルを指定して更新' do
      let(:new_attributes) {valid_attributes.clone.merge!(title: 'New title', description:'New description')}

      context '既存ラベルを指定して更新' do
        it 'ラベルが指定されている' do
          label = Label.first
          task = Task.create! valid_attributes

          put :update, params: {id: task.to_param, task: new_attributes, labels: [label.id]}, session: valid_session
          task.reload
          expect(task.labels.first.id).to eq label.id
        end
      end

      context '新規ラベルを指定して更新' do
        it 'ユーザ用に新規作成されたラベルが指定されている' do
          task = Task.create! valid_attributes

          put :update, params: {id: task.to_param, task: new_attributes, new_labels: ['New Label']}, session: valid_session
          task.reload
          expect(task.labels.first.user_id).to eq session[:user]['id'].to_i
        end
      end
    end

    context '更新失敗' do
      it '入力画面が再表示される' do
        task = Task.create! valid_attributes
        put :update, params: {id: task.to_param, task: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE #destroy' do
    context '削除' do
      it 'タスクが削除される' do
        task = Task.create! valid_attributes
        expect {
          delete :destroy, params: {id: task.to_param}, session: valid_session
        }.to change(Task, :count).by(-1)
      end

      it 'タスク一覧ページを表示' do
        task = Task.create! valid_attributes
        delete :destroy, params: {id: task.to_param}, session: valid_session
        expect(response).to redirect_to(tasks_url)
      end
    end

    context 'ラベル付きタスクの削除' do
      it '関連テーブルのレコードが削除される' do
        task = Task.create! valid_attributes
        task_to_label = TaskToLabel.create! task_id: task.id, label_id: Label.first.id
        expect(TaskToLabel.where(task_id: task.id).count).to eq 1

        delete :destroy, params: {id: task.to_param}, session: valid_session

        expect(TaskToLabel.where(task_id: task.id).count).to eq 0
      end
    end
  end
end
